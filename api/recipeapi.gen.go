// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// LoginCredentials defines model for LoginCredentials.
type LoginCredentials struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token *string `json:"token,omitempty"`
}

// NewRecipe defines model for NewRecipe.
type NewRecipe struct {
	Description string   `json:"description"`
	Ingredients []string `json:"ingredients"`
	Steps       []string `json:"steps"`
	Title       string   `json:"title"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// Recipe defines model for Recipe.
type Recipe struct {
	CreatorId   int64    `json:"creatorId"`
	Description string   `json:"description"`
	Id          int64    `json:"id"`
	Ingredients []string `json:"ingredients"`
	Steps       []string `json:"steps"`
	Title       string   `json:"title"`
}

// CreateRecipeJSONRequestBody defines body for CreateRecipe for application/json ContentType.
type CreateRecipeJSONRequestBody = NewRecipe

// UpdateRecipeJSONRequestBody defines body for UpdateRecipe for application/json ContentType.
type UpdateRecipeJSONRequestBody = NewRecipe

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = NewUser

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginCredentials

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all recipes
	// (GET /recipes)
	ListRecipes(w http.ResponseWriter, r *http.Request)
	// Create a new recipe
	// (POST /recipes)
	CreateRecipe(w http.ResponseWriter, r *http.Request)
	// Delete a recipe
	// (DELETE /recipes/{id})
	DeleteRecipe(w http.ResponseWriter, r *http.Request, id int64)
	// Get a single recipe by ID
	// (GET /recipes/{id})
	GetRecipeById(w http.ResponseWriter, r *http.Request, id int64)
	// Update an existing recipe
	// (PUT /recipes/{id})
	UpdateRecipe(w http.ResponseWriter, r *http.Request, id int64)
	// Create a new user
	// (POST /users/create)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// User login
	// (POST /users/login)
	LoginUser(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all recipes
// (GET /recipes)
func (_ Unimplemented) ListRecipes(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new recipe
// (POST /recipes)
func (_ Unimplemented) CreateRecipe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a recipe
// (DELETE /recipes/{id})
func (_ Unimplemented) DeleteRecipe(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a single recipe by ID
// (GET /recipes/{id})
func (_ Unimplemented) GetRecipeById(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing recipe
// (PUT /recipes/{id})
func (_ Unimplemented) UpdateRecipe(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new user
// (POST /users/create)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User login
// (POST /users/login)
func (_ Unimplemented) LoginUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListRecipes operation middleware
func (siw *ServerInterfaceWrapper) ListRecipes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRecipes(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateRecipe operation middleware
func (siw *ServerInterfaceWrapper) CreateRecipe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRecipe(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteRecipe operation middleware
func (siw *ServerInterfaceWrapper) DeleteRecipe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteRecipe(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRecipeById operation middleware
func (siw *ServerInterfaceWrapper) GetRecipeById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRecipeById(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateRecipe operation middleware
func (siw *ServerInterfaceWrapper) UpdateRecipe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateRecipe(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recipes", wrapper.ListRecipes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recipes", wrapper.CreateRecipe)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/recipes/{id}", wrapper.DeleteRecipe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recipes/{id}", wrapper.GetRecipeById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/recipes/{id}", wrapper.UpdateRecipe)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/create", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/login", wrapper.LoginUser)
	})

	return r
}

type ListRecipesRequestObject struct {
}

type ListRecipesResponseObject interface {
	VisitListRecipesResponse(w http.ResponseWriter) error
}

type ListRecipes200JSONResponse []Recipe

func (response ListRecipes200JSONResponse) VisitListRecipesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateRecipeRequestObject struct {
	Body *CreateRecipeJSONRequestBody
}

type CreateRecipeResponseObject interface {
	VisitCreateRecipeResponse(w http.ResponseWriter) error
}

type CreateRecipe201JSONResponse Recipe

func (response CreateRecipe201JSONResponse) VisitCreateRecipeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateRecipe400Response struct {
}

func (response CreateRecipe400Response) VisitCreateRecipeResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteRecipeRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteRecipeResponseObject interface {
	VisitDeleteRecipeResponse(w http.ResponseWriter) error
}

type DeleteRecipe200Response struct {
}

func (response DeleteRecipe200Response) VisitDeleteRecipeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteRecipe404Response struct {
}

func (response DeleteRecipe404Response) VisitDeleteRecipeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetRecipeByIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetRecipeByIdResponseObject interface {
	VisitGetRecipeByIdResponse(w http.ResponseWriter) error
}

type GetRecipeById200JSONResponse Recipe

func (response GetRecipeById200JSONResponse) VisitGetRecipeByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecipeById404Response struct {
}

func (response GetRecipeById404Response) VisitGetRecipeByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateRecipeRequestObject struct {
	Id   int64 `json:"id"`
	Body *UpdateRecipeJSONRequestBody
}

type UpdateRecipeResponseObject interface {
	VisitUpdateRecipeResponse(w http.ResponseWriter) error
}

type UpdateRecipe200Response struct {
}

func (response UpdateRecipe200Response) VisitUpdateRecipeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateRecipe400Response struct {
}

func (response UpdateRecipe400Response) VisitUpdateRecipeResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdateRecipe404Response struct {
}

func (response UpdateRecipe404Response) VisitUpdateRecipeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201Response struct {
}

func (response CreateUser201Response) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateUser400Response struct {
}

func (response CreateUser400Response) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type LoginUserRequestObject struct {
	Body *LoginUserJSONRequestBody
}

type LoginUserResponseObject interface {
	VisitLoginUserResponse(w http.ResponseWriter) error
}

type LoginUser200JSONResponse LoginResponse

func (response LoginUser200JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginUser401Response struct {
}

func (response LoginUser401Response) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all recipes
	// (GET /recipes)
	ListRecipes(ctx context.Context, request ListRecipesRequestObject) (ListRecipesResponseObject, error)
	// Create a new recipe
	// (POST /recipes)
	CreateRecipe(ctx context.Context, request CreateRecipeRequestObject) (CreateRecipeResponseObject, error)
	// Delete a recipe
	// (DELETE /recipes/{id})
	DeleteRecipe(ctx context.Context, request DeleteRecipeRequestObject) (DeleteRecipeResponseObject, error)
	// Get a single recipe by ID
	// (GET /recipes/{id})
	GetRecipeById(ctx context.Context, request GetRecipeByIdRequestObject) (GetRecipeByIdResponseObject, error)
	// Update an existing recipe
	// (PUT /recipes/{id})
	UpdateRecipe(ctx context.Context, request UpdateRecipeRequestObject) (UpdateRecipeResponseObject, error)
	// Create a new user
	// (POST /users/create)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// User login
	// (POST /users/login)
	LoginUser(ctx context.Context, request LoginUserRequestObject) (LoginUserResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListRecipes operation middleware
func (sh *strictHandler) ListRecipes(w http.ResponseWriter, r *http.Request) {
	var request ListRecipesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListRecipes(ctx, request.(ListRecipesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRecipes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListRecipesResponseObject); ok {
		if err := validResponse.VisitListRecipesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateRecipe operation middleware
func (sh *strictHandler) CreateRecipe(w http.ResponseWriter, r *http.Request) {
	var request CreateRecipeRequestObject

	var body CreateRecipeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRecipe(ctx, request.(CreateRecipeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRecipe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateRecipeResponseObject); ok {
		if err := validResponse.VisitCreateRecipeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRecipe operation middleware
func (sh *strictHandler) DeleteRecipe(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteRecipeRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRecipe(ctx, request.(DeleteRecipeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRecipe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteRecipeResponseObject); ok {
		if err := validResponse.VisitDeleteRecipeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRecipeById operation middleware
func (sh *strictHandler) GetRecipeById(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetRecipeByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecipeById(ctx, request.(GetRecipeByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecipeById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRecipeByIdResponseObject); ok {
		if err := validResponse.VisitGetRecipeByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateRecipe operation middleware
func (sh *strictHandler) UpdateRecipe(w http.ResponseWriter, r *http.Request, id int64) {
	var request UpdateRecipeRequestObject

	request.Id = id

	var body UpdateRecipeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRecipe(ctx, request.(UpdateRecipeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRecipe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateRecipeResponseObject); ok {
		if err := validResponse.VisitUpdateRecipeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoginUser operation middleware
func (sh *strictHandler) LoginUser(w http.ResponseWriter, r *http.Request) {
	var request LoginUserRequestObject

	var body LoginUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginUser(ctx, request.(LoginUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginUserResponseObject); ok {
		if err := validResponse.VisitLoginUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTW/cNhD9KwTbo2BtWqMIdHNsNNjC/YAbowdjD7Q0WjGlSJYc2V0Y+98LDrn6WMmx",
	"HcRpTitxZ8g3780MRw+8NK01GjR6XjxwXzbQCnq8NFupzx1UoFEKRWvWGQsOJdAbtEKq8FAb1wrkRVrJ",
	"OO4s8IJ7dFJv+T7jVnh/b1w1se4XZw77jDv4p5MOKl7c9Nv2Dpvew9x+hBLDEYT3Crw12sMcLJq/QdPD",
	"7KjZVr/B/RWU0i5sU4EvnbQozdJmGZd666CSBz4lQusXDdOCcE7swrtHsC90QYkKlkMasxfNsgn0KdDD",
	"6ZtlLq49uG9d/UEvodTvNS9uHvj3Dmpe8O/yIcfzlOD5IPE+O46sdCDQuPUUr9T40+kAVmqELTjS/HmG",
	"R2HJEPlw1DyoTfDwUHZO4u7PgDvCuwXhwJ112AxvPx8O/+WvD0FOsuZF+ncA0yBavt9TotZmltD8QyM9",
	"k54J5mVrFbCzP9asNo61Qout1FvmiDWfMalL1VVhqfPgmOiwCZ2iFGGrLC6SF7SgMWNCV8mZnV9dX7DA",
	"ONn6E97nctKR/do7BgQ843fgfIT45mR1sgq0GwtaWMkL/iMthQzBhijKE8rwvAUMP/1xQVZ+KT1eJZsg",
	"S+waZP/DakVJYDSCJldhrUpx5R99LPyYR5N6/VS69bl2VMRBiakCZ0xJj8zUB6YpcXzXtsLtEnImlBr+",
	"zrg1fiHG85BbkE6OuQce35lq96L4nllF80iSlGjYLTBKdKj4uAbQdbCfsf/mi6F7EloCxXxXgvd1pxT1",
	"1dOYAVOXtb4TSlZMatshH5cm9ZpxUd5s9puxZFEIJpiG+yQbbXDI0vxBVvt4ogKEuZIXtN4raYUTLSA4",
	"T0dLTd0UG55xLajs5ZzobETa061qs1wUiyxG1MTiEY2nj/pog6w2na5exmQkgomexWy5vN9Dqu53u3U1",
	"Z+xI2YtQbdjAoT2hYWHX7Gsy++oJT8UP1Yi5F+jTC/AekO4GvVU9Xbc7tr6gNtQtSHFtK/E/5O5X7nUx",
	"yv6CC5drgBlHrac63uOl1aVt56X1dId6lQKMcTKhGfwrPQ4DQWxo4dL3eWyrNDF+4mKiqfLVpKLdl4QK",
	"Y8lnXUkL+4zuj8+6QJZviM6naTHRqcKHzeNs0nfPK5I5+w58jFXCGTjpLZ+Z+l8OZv/5t4CRDEZSRaEW",
	"pD2bTLKsFlLBcR8cAo5HeXB3y7fLpSmFYhXcgTKWBtpoyzPeOZVG8iLPVbBrjMfi7ertKkz//wUAAP//",
	"g0fY+pwPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
