// Package recipeapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package recipeapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// LoginCredentials defines model for LoginCredentials.
type LoginCredentials struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token *string `json:"token,omitempty"`
}

// NewRecipe defines model for NewRecipe.
type NewRecipe struct {
	Description string   `json:"description"`
	Ingredients []string `json:"ingredients"`
	Steps       []string `json:"steps"`
	Title       string   `json:"title"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// Recipe defines model for Recipe.
type Recipe struct {
	CreatorId   *string   `json:"creatorId,omitempty"`
	Description *string   `json:"description,omitempty"`
	Id          *string   `json:"id,omitempty"`
	Ingredients *[]string `json:"ingredients,omitempty"`
	Steps       *[]string `json:"steps,omitempty"`
	Title       *string   `json:"title,omitempty"`
}

// CreateRecipeJSONRequestBody defines body for CreateRecipe for application/json ContentType.
type CreateRecipeJSONRequestBody = NewRecipe

// UpdateRecipeJSONRequestBody defines body for UpdateRecipe for application/json ContentType.
type UpdateRecipeJSONRequestBody = NewRecipe

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = NewUser

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginCredentials

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all recipes
	// (GET /recipes)
	ListRecipes(w http.ResponseWriter, r *http.Request)
	// Create a new recipe
	// (POST /recipes)
	CreateRecipe(w http.ResponseWriter, r *http.Request)
	// Delete a recipe
	// (DELETE /recipes/{id})
	DeleteRecipe(w http.ResponseWriter, r *http.Request, id string)
	// Get a single recipe by ID
	// (GET /recipes/{id})
	GetRecipeById(w http.ResponseWriter, r *http.Request, id string)
	// Update an existing recipe
	// (PUT /recipes/{id})
	UpdateRecipe(w http.ResponseWriter, r *http.Request, id string)
	// Create a new user
	// (POST /users/create)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// User login
	// (POST /users/login)
	LoginUser(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all recipes
// (GET /recipes)
func (_ Unimplemented) ListRecipes(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new recipe
// (POST /recipes)
func (_ Unimplemented) CreateRecipe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a recipe
// (DELETE /recipes/{id})
func (_ Unimplemented) DeleteRecipe(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a single recipe by ID
// (GET /recipes/{id})
func (_ Unimplemented) GetRecipeById(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing recipe
// (PUT /recipes/{id})
func (_ Unimplemented) UpdateRecipe(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new user
// (POST /users/create)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User login
// (POST /users/login)
func (_ Unimplemented) LoginUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListRecipes operation middleware
func (siw *ServerInterfaceWrapper) ListRecipes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRecipes(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateRecipe operation middleware
func (siw *ServerInterfaceWrapper) CreateRecipe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRecipe(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteRecipe operation middleware
func (siw *ServerInterfaceWrapper) DeleteRecipe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteRecipe(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRecipeById operation middleware
func (siw *ServerInterfaceWrapper) GetRecipeById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRecipeById(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateRecipe operation middleware
func (siw *ServerInterfaceWrapper) UpdateRecipe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateRecipe(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recipes", wrapper.ListRecipes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recipes", wrapper.CreateRecipe)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/recipes/{id}", wrapper.DeleteRecipe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recipes/{id}", wrapper.GetRecipeById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/recipes/{id}", wrapper.UpdateRecipe)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/create", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/login", wrapper.LoginUser)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXwW4jNwz9FYHtcZDxtntYzC2bAAsDaVEEzWmRgzKibW01kipykhqB/72QNJ7YHnnd",
	"DeIip4wVkiLfI5+kZ2hd551FywTNM1C7wk6mzxu31PYqoELLWpq05oPzGFhj+oWd1CZ+LFzoJEMzrFTA",
	"a4/QAHHQdgmbCrwkenJB7VmPixOHTQUB/+51QAXN1zHs6HA/eriHb9hy3CLle4vknSWcJsvuL7TpY7LV",
	"JNTv+HSLrfaFMAqpDdqzdqVgFWi7DKj0Fk/N2FHRcFiQIch1/E2M/gddWLPBckm76GWzai/1/US3u9+X",
	"sbgjDO+d/WN8tQEluzBXRURPsqneM8kHIGxSZgs3aVP4c6VJaBJSkO68QXH5x1wsXBCdtHKp7VKEBB9V",
	"QtvW9Cou9YRByJ5Xcf5bGUNVeTF5YYeWKyGtGpzF1e3dtYjYJ1u6gDH5gR3x2+gYM4AKHjFQTvHDxexi",
	"Fut1Hq30Ghr4NS1F3nmVsKqHLOP3Ejn+GbeLBMONJr4dbGIPZS1I9r/MZqkdnGW0yVV6b4a66m+UGyDL",
	"3x5BPwdcQAM/1S9CWQ8qWQ9NN2Ftc9hacCmMJhZusUU6EUh918mwHjIX0piXf1fgHRVqvIoNjcPOeVCQ",
	"+LNT6x+q73tlvchfoZKBSnbiAUWaLlSwO7AcetxM0P/wZtmdTG1ISlDfItGiNyYN0sfcAfsuc/sojVZC",
	"W9/zAScZaSGFxaeBl2SxbcP6WatNDmmQcUrVdVofqfIyyA4ZA0Hz9Rm0TSLIK6jAyi62j54iWe2gcqgA",
	"9+UeL4KSc0ygHKDy8aiPdSwWrrfqAJhcl5AjKFV5HL/gMI2f13M1BeCAies4HbzCrZywEzFqdT6gzt6O",
	"aTRR7eD0Gri/ICfltkszgvOwFvPrJBJ9Afg7r+TZG+9/1p1c03jYxIMuXiTyZeaU+hyfi34IO52L02rx",
	"OjpzIUJagf9o4pfTN4tLPGGpzhqWrjPfOQXSxexsXKToJSbiHeBV+l+IsyPWb6jWfU59hNPEt8FxNNPT",
	"4YxgTp5Sx1BNeUZMRsv/2Ntvl+b4girkmAx2qMpEFai93Ls2ioXUBidzMBactyIMj+Wj4ca10giFj2ic",
	"T7fHbAsV9MFAAytm39S1iXYrR9x8mn2aweZ+828AAAD//0bAikrfDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
